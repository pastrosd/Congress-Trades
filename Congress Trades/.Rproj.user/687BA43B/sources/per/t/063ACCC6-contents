---
title: "Congress Trades"
author: "Daniel Pastros"
date: " `r lubridate::today()`"
output: html_document
runtime: shiny
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
	echo = FALSE,
	message = FALSE,
	warning = FALSE
)
source('tools.R')

load_congress <- TRUE

```

```{r load}
if(TRUE == load_congress){
congress.df <- congress_json()
}
```

## Data Review

```{r data review, echo=FALSE}
congress.df%>%
  filter(transaction_date>ymd("19000101"))%>%
  mutate(is_purchase = case_when(position == 'purchase'~1,TRUE~0),
         is_sale = case_when(position == 'sale'~1,TRUE~0))%>%
  summarize(`First Trade Date` = min(transaction_date),
            `Last Trade Date` = max(transaction_date),
            `Number of Records` = n(),
            `Number of Purchases` = sum(is_purchase),
            `Number of Sales` = sum(is_sale)
            )%>%pivot_longer(cols = c(`First Trade Date`,
                                      `Last Trade Date`,
                                      `Number of Records`,
                                      `Number of Purchases`,
                                      `Number of Sales`),
            values_transform = as.character)



```

## Biggest Trader

The top 10 congress members in trading volume in the last 12 months.

```{r trading members}

trade.vol.top <- congress.df%>%
  filter(transaction_date >= (today()- months(12)))%>%
group_by(congress_member)%>%
  summarize(Trades = n())%>%
  arrange(desc(Trades))%>%head()%>%arrange(Trades)

trade.vol.top%>%
  plot_ly(x=~Trades,y=~congress_member,mode = 'bars')%>%
  layout(yaxis = list(categoryarray = trade.vol.top$congress_member))

```

## Hot Stocks

The top 10 stocks that were bought in the last month.

```{r buying stock}

top.buying.tck.month <- congress.df%>%
  filter(transaction_date >= (today()- months(1))
         & ticker != "--"
         & position == 'purchase')%>%
  group_by(ticker)%>%
  summarize(trades = n())%>%
  arrange(desc(trades))%>%head(10)%>%arrange(trades)

buying.tck.month <-congress.df%>%
  filter(transaction_date >= (today()- months(1))
         & ticker %in% c(top.buying.tck.month$ticker)
         & position == 'purchase')%>%
  group_by(ticker,congress_member)%>%
  summarize(trades = n())

buying.tck.month%>%
  plot_ly(x=~trades,y=~ticker,color=~congress_member,mode = 'bars')%>%
  layout(yaxis = list(categoryarray = top.buying.tck.month$ticker), barmode = 'stack')

```

The top 10 stocks that were sold in the last month.

```{r selling stock}

top.sell.tck.month <- congress.df%>%
  filter(transaction_date >= (today()- months(1))
         & ticker != "--"
         & position == 'sale')%>%
  group_by(ticker)%>%
  summarize(trades = n())%>%
  arrange(desc(trades))%>%head(10)%>%arrange(trades)

selling.tck.month <-congress.df%>%
  filter(transaction_date >= (today()- months(1))
         & ticker %in% c(top.sell.tck.month$ticker)
         & position == 'sale')%>%
  group_by(ticker,congress_member)%>%
  summarize(trades = n())

selling.tck.month%>%
  plot_ly(x=~trades,y=~ticker,color=~congress_member,mode = 'bars')%>%
  layout(yaxis = list(categoryarray = top.sell.tck.month$ticker), barmode = 'stack')

```

<!-- ```{r eruptions, echo=FALSE} -->

<!-- inputPanel( -->

<!--   selectInput("n_breaks", label = "Number of bins:", -->

<!--               choices = c(10, 20, 35, 50), selected = 20), -->

<!--   sliderInput("bw_adjust", label = "Bandwidth adjustment:", -->

<!--               min = 0.2, max = 2, value = 1, step = 0.2) -->

<!-- ) -->

<!-- renderPlot({ -->

<!--   hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks), -->

<!--        xlab = "Duration (minutes)", main = "Geyser eruption duration") -->

<!--   dens <- density(faithful$eruptions, adjust = input$bw_adjust) -->

<!--   lines(dens, col = "blue") -->

<!-- }) -->

<!-- ``` -->
